// MOVA Integrated Development Environment
// –¶–µ–π —Å–∫—Ä–∏–ø—Ç –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä—ñ —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î –ø–æ–≤–Ω–∏–π UI –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ MOVA

class MOVAUI {
    constructor() {
        this.lexicon = null;
        this.allowlist = null;
        this.activeTab = 'editor';
        this.activeFile = null;
        this.executionProcess = null;
    }

    async init() {
        await this.loadResources();
        this.setupTabs();
        this.setupEditor();
        this.setupVNLParser();
        this.setupPlanRunner();
        this.setupValidation();
        this.setupLexiconManager();
        this.setupBuildSystem();
    }

    async loadResources() {
        try {
            const [lexiconRes, allowlistRes] = await Promise.all([
                fetch('/lexicon_uk.json'),
                fetch('/allowlist_structural.json')
            ]);

            if (!lexiconRes.ok) throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ lexicon_uk.json');
            if (!allowlistRes.ok) throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ allowlist_structural.json');

            this.lexicon = await lexiconRes.json();
            const allowlistArray = await allowlistRes.json();
            this.allowlist = new Set(allowlistArray);

        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫—ñ–≤:", error);
            alert(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å. ${error.message}`);
            return;
        }
    }

    setupTabs() {
        const tabs = document.querySelectorAll('.tab');
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                this.switchTab(tab.dataset.tab);
            });
        });
    }

    switchTab(tabName) {
        // Hide all tabs
        document.querySelectorAll('.container').forEach(container => {
            container.classList.add('hidden');
        });

        // Remove active class from all tabs
        document.querySelectorAll('.tab').forEach(tab => {
            tab.classList.remove('active');
        });

        // Show selected tab
        document.getElementById(`${tabName}-tab`).classList.remove('hidden');
        document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');

        this.activeTab = tabName;
    }

    // === EDITOR TAB ===
    setupEditor() {
        const ukInput = document.getElementById('uk-input');
        const enOutput = document.getElementById('en-output');
        const saveButton = document.getElementById('save-button');
        const fileListElement = document.getElementById('file-list');

        const handleTranslation = () => {
            const ukJsonText = ukInput.value;
            if (ukJsonText.trim() === '') {
                enOutput.value = '';
                return;
            }

            try {
                const ukJson = JSON.parse(ukJsonText);
                const enJson = this.translateObject(ukJson);
                enOutput.value = JSON.stringify(enJson, null, 2);
            } catch (error) {
                enOutput.value = `–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –∞–±–æ —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó:\n${error.message}`;
            }
        };

        const saveFile = async () => {
            if (!this.activeFile) {
                alert('–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.');
                return;
            }

            saveButton.disabled = true;
            saveButton.textContent = '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...';

            try {
                const response = await fetch('/api/save-template', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        filename: this.activeFile,
                        content: ukInput.value,
                    }),
                });

                const result = await response.json();

                if (!response.ok) {
                    throw new Error(result.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                }

                alert(result.message);

            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', error);
                alert(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª: ${error.message}`);
            } finally {
                saveButton.disabled = false;
                saveButton.textContent = '–ó–±–µ—Ä–µ–≥—Ç–∏';
            }
        };

        ukInput.addEventListener('input', handleTranslation);
        saveButton.addEventListener('click', saveFile);

        // Load file list
        this.loadFileList(fileListElement, 'templates/ua', (filename) => {
            this.loadFile(filename, ukInput, fileListElement, 'uk-input');
        });

        // Handle paste
        ukInput.addEventListener('paste', () => {
            setTimeout(() => {
                this.activeFile = null;
                saveButton.disabled = true;
                fileListElement.querySelectorAll('li.active').forEach(li => li.classList.remove('active'));
                handleTranslation();
            }, 0);
        });
    }

    // === VNL PARSER TAB ===
    setupVNLParser() {
        const parseBtn = document.getElementById('parse-vnl-btn');
        const vnlInput = document.getElementById('vnl-input');
        const astOutput = document.getElementById('vnl-ast');
        const planOutput = document.getElementById('vnl-plan');

        parseBtn.addEventListener('click', async () => {
            const sentence = vnlInput.value.trim();
            if (!sentence) {
                alert('–í–≤–µ–¥—ñ—Ç—å —Ä–µ—á–µ–Ω–Ω—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É');
                return;
            }

            parseBtn.disabled = true;
            parseBtn.textContent = '–ü–∞—Ä—Å–∏–Ω–≥...';

            try {
                // –í–∏–∫–ª–∏–∫–∞—î–º–æ CLI –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ API (–ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –¥–æ —Å–µ—Ä–≤–µ—Ä–∞)
                const response = await fetch('/api/parse-vnl', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ sentence })
                });

                const result = await response.json();

                if (response.ok) {
                    astOutput.value = JSON.stringify(result.ast, null, 2);
                    planOutput.value = JSON.stringify(result.plan, null, 2);
                } else {
                    throw new Error(result.error);
                }

            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É VNL:', error);
                astOutput.value = `–ü–æ–º–∏–ª–∫–∞: ${error.message}`;
                planOutput.value = '';
            } finally {
                parseBtn.disabled = false;
                parseBtn.textContent = '–ü–∞—Ä—Å–∏—Ç–∏';
            }
        });
    }

    // === PLAN RUNNER TAB ===
    setupPlanRunner() {
        const planList = document.getElementById('plan-list');
        const planContent = document.getElementById('plan-content');
        const runBtn = document.getElementById('run-plan-btn');
        const stopBtn = document.getElementById('stop-plan-btn');
        const logArea = document.getElementById('execution-log');

        this.loadFileList(planList, 'canonical', (filename) => {
            this.loadFile(filename, planContent, planList, 'canonical');
        });

        runBtn.addEventListener('click', async () => {
            const planText = planContent.value.trim();
            if (!planText) {
                alert('–í–∏–±–µ—Ä—ñ—Ç—å –ø–ª–∞–Ω –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è');
                return;
            }

            runBtn.disabled = true;
            stopBtn.disabled = false;
            logArea.textContent = 'üöÄ –ü–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–ª–∞–Ω—É...\n';

            try {
                const response = await fetch('/api/run-plan', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ plan: planText })
                });

                const result = await response.json();

                if (response.ok) {
                    logArea.textContent += '‚úÖ –ü–ª–∞–Ω –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ\n';
                    if (result.output) {
                        logArea.textContent += `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(result.output, null, 2)}\n`;
                    }
                } else {
                    throw new Error(result.error);
                }

            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–ª–∞–Ω—É:', error);
                logArea.textContent += `‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}\n`;
            } finally {
                runBtn.disabled = false;
                stopBtn.disabled = true;
            }
        });

        stopBtn.addEventListener('click', () => {
            if (this.executionProcess) {
                // –õ–æ–≥—ñ–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –ø—Ä–æ—Ü–µ—Å—É
                logArea.textContent += 'üõë –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º\n';
                runBtn.disabled = false;
                stopBtn.disabled = true;
            }
        });
    }

    // === VALIDATION TAB ===
    setupValidation() {
        const validateBtn = document.getElementById('validate-btn');
        const inputArea = document.getElementById('validation-input');
        const resultsArea = document.getElementById('validation-results');
        const statusArea = document.getElementById('validation-status');

        validateBtn.addEventListener('click', async () => {
            const jsonText = inputArea.value.trim();
            if (!jsonText) {
                alert('–í–≤–µ–¥—ñ—Ç—å JSON –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó');
                return;
            }

            validateBtn.disabled = true;
            validateBtn.textContent = '–í–∞–ª—ñ–¥–∞—Ü—ñ—è...';
            resultsArea.innerHTML = '';
            statusArea.innerHTML = '';

            try {
                const response = await fetch('/api/validate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ json: jsonText })
                });

                const result = await response.json();

                if (response.ok) {
                    statusArea.innerHTML = '<div class="status success">‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ</div>';
                    resultsArea.textContent = '–§–∞–π–ª –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å—Ö–µ–º—ñ JSON Schema';
                } else {
                    statusArea.innerHTML = '<div class="status error">‚ùå –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó</div>';
                    resultsArea.textContent = result.errors.join('\n');
                }

            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:', error);
                statusArea.innerHTML = '<div class="status error">‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó</div>';
                resultsArea.textContent = error.message;
            } finally {
                validateBtn.disabled = false;
                validateBtn.textContent = '–í–∞–ª—ñ–¥—É–≤–∞—Ç–∏';
            }
        });
    }

    // === LEXICON TAB ===
    setupLexiconManager() {
        const lexiconArea = document.getElementById('lexicon-content');
        const allowlistArea = document.getElementById('allowlist-content');
        const reloadBtn = document.getElementById('reload-lexicon-btn');
        const saveBtn = document.getElementById('save-lexicon-btn');

        const loadLexicon = async () => {
            try {
                const [lexRes, allowRes] = await Promise.all([
                    fetch('/lexicon_uk.json'),
                    fetch('/allowlist_structural.json')
                ]);

                lexiconArea.value = JSON.stringify(await lexRes.json(), null, 2);
                allowlistArea.value = JSON.stringify(await allowRes.json(), null, 2);

            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–µ–∫—Å–∏–∫–æ–Ω—É:', error);
                alert(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ª–µ–∫—Å–∏–∫–æ–Ω: ${error.message}`);
            }
        };

        reloadBtn.addEventListener('click', loadLexicon);
        saveBtn.addEventListener('click', async () => {
            try {
                const lexiconData = JSON.parse(lexiconArea.value);
                const allowlistData = JSON.parse(allowlistArea.value);

                // –¢—É—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ API –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–µ–∫—Å–∏–∫–æ–Ω—É
                alert('–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–µ–∫—Å–∏–∫–æ–Ω—É –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ API');

            } catch (error) {
                alert(`–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${error.message}`);
            }
        });

        loadLexicon();
    }

    // === BUILD TAB ===
    setupBuildSystem() {
        const buildAllBtn = document.getElementById('build-all-btn');
        const translateBtn = document.getElementById('translate-btn');
        const validateAllBtn = document.getElementById('validate-all-btn');
        const buildManifestBtn = document.getElementById('build-manifest-btn');
        const checkLexiconBtn = document.getElementById('check-lexicon-btn');
        const buildLog = document.getElementById('build-log');
        const buildStatus = document.getElementById('build-status');

        const runCommand = async (command, description) => {
            buildLog.textContent += `üöÄ ${description}...\n`;
            buildStatus.innerHTML = '<div class="status warning">‚ö° –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è...</div>';

            try {
                const response = await fetch('/api/run-command', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ command })
                });

                const result = await response.json();

                if (response.ok) {
                    buildLog.textContent += `‚úÖ ${description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n`;
                    if (result.output) {
                        buildLog.textContent += `${result.output}\n`;
                    }
                    buildStatus.innerHTML = '<div class="status success">‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ</div>';
                } else {
                    throw new Error(result.error);
                }

            } catch (error) {
                console.error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è ${command}:`, error);
                buildLog.textContent += `‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}\n`;
                buildStatus.innerHTML = '<div class="status error">‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è</div>';
            }
        };

        buildAllBtn.addEventListener('click', () => runCommand('npm run build', '–ü–æ–≤–Ω–∞ –∑–±—ñ—Ä–∫–∞'));
        translateBtn.addEventListener('click', () => runCommand('npm run translate', '–ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–π'));
        validateAllBtn.addEventListener('click', () => runCommand('npm run validate', '–í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤'));
        buildManifestBtn.addEventListener('click', () => runCommand('npm run build:manifest', '–ó–±—ñ—Ä–∫–∞ –º–∞–Ω—ñ—Ñ–µ—Å—Ç—É'));
        checkLexiconBtn.addEventListener('click', () => runCommand('npm run check:lexicon', '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–µ–∫—Å–∏–∫–æ–Ω—É'));
    }

    // === UTILITY METHODS ===
    translateObject(obj) {
        if (Array.isArray(obj)) {
            return obj.map(item => this.translateObject(item));
        }
        if (obj !== null && typeof obj === 'object') {
            const newObj = {};
            for (const key in obj) {
                const translatedKey = this.allowlist.has(key) ? (this.lexicon[key] || key) : key;
                let value = this.translateObject(obj[key]);

                if (translatedKey === 'type' && typeof value === 'string') {
                    value = this.lexicon[value] || value;
                }

                newObj[translatedKey] = value;
            }
            return newObj;
        }
        return obj;
    }

    async loadFileList(listElement, path, onSelect) {
        try {
            const response = await fetch(`/api/files?path=${path}`);
            if (!response.ok) throw new Error(`HTTP ${response.status}`);

            const files = await response.json();

            listElement.innerHTML = '';
            files.sort().forEach(file => {
                const li = document.createElement('li');
                li.textContent = file;
                li.dataset.filename = file;
                li.addEventListener('click', () => onSelect(file));
                listElement.appendChild(li);
            });
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª—ñ–≤:', error);
            listElement.innerHTML = `<li>–ü–æ–º–∏–ª–∫–∞: ${error.message}</li>`;
        }
    }

    async loadFile(filename, textarea, listElement, basePath = 'templates/ua') {
        try {
            const response = await fetch(`/${basePath}/${filename}`);
            if (!response.ok) throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª ${filename}`);

            const content = await response.text();
            textarea.value = content;

            this.activeFile = filename;

            listElement.querySelectorAll('li').forEach(li => {
                li.classList.toggle('active', li.dataset.filename === filename);
            });

        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É:', error);
            alert(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: ${error.message}`);
        }
    }
}

// Initialize the application
document.addEventListener('DOMContentLoaded', () => {
    const movaUI = new MOVAUI();
    movaUI.init();
});