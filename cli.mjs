import { spawn } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const [,, command, ...args] = process.argv;

const scripts = {
    'parse': {
        path: 'scripts/language/parse_vnl.mjs',
        description: '–ü–∞—Ä—Å–∏—Ç—å —Ä–µ—á–µ–Ω–Ω—è VNL —ñ –≥–µ–Ω–µ—Ä—É—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –ø–ª–∞–Ω.\n  –ü—Ä–∏–∫–ª–∞–¥: parse "send message to general"'
    },
    'run': {
        path: 'scripts/runtime/run_plan.mjs',
        description: '–í–∏–∫–æ–Ω—É—î –∫–∞–Ω–æ–Ω—ñ—á–Ω–∏–π (–∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–π) –ø–ª–∞–Ω.\n  –ü—Ä–∏–∫–ª–∞–¥: run canonical/plan_min.json'
    },
    'build': {
        npm: 'build:ua',
        description: '–ó–±–∏—Ä–∞—î —Ç–∞ –≤–∞–ª—ñ–¥—É—î —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —à–∞–±–ª–æ–Ω–∏, —Å—Ç–≤–æ—Ä—é—é—á–∏ –∫–∞–Ω–æ–Ω—ñ—á–Ω—ñ —Ñ–∞–π–ª–∏.'
    },
    'translate:reverse': {
        npm: 'translate:en-ua',
        description: '–ü–µ—Ä–µ–∫–ª–∞–¥–∞—î –≤—Å—ñ –∫–∞–Ω–æ–Ω—ñ—á–Ω—ñ —Ñ–∞–π–ª–∏ –∑ /canonical –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –≤ /templates/ua/from-en.'
    },
    'fingerprint': {
        npm: 'build:fingerprint',
        description: '–ì–µ–Ω–µ—Ä—É—î "–≤—ñ–¥–±–∏—Ç–æ–∫" (—Ö–µ—à—ñ) –¥–ª—è –≤—Å—ñ—Ö —Å—Ö–µ–º —É build/schema_fingerprint.json.'
    },
    'help': {
        description: '–ü–æ–∫–∞–∑—É—î —Ü—é –¥–æ–≤—ñ–¥–∫—É.'
    }
};

function printHelp() {
    console.log('--- –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ MOVA ---');
    console.log('\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: npm run cli -- <–∫–æ–º–∞–Ω–¥–∞> [–∞—Ä–≥—É–º–µ–Ω—Ç–∏]\n');
    console.log('–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n');
    for (const cmd in scripts) {
        // Pad the command name for alignment
        const paddedCmd = cmd.padEnd(20, ' ');
        console.log(`  ${paddedCmd} ${scripts[cmd].description}`);
    }
    console.log('\n----------------------------------------');
}

if (!command || command === 'help') {
    printHelp();
    process.exit(0);
}

const scriptConfig = scripts[command];

if (!scriptConfig) {
    console.error(`‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: "${command}"`);
    printHelp();
    process.exit(1);
}

// Function to run a node script
function runNodeScript(scriptPath, scriptArgs) {
    const fullPath = resolve(__dirname, scriptPath);
    // For VNL parser, we need to join args back into a sentence
    const finalArgs = scriptPath.includes('parse_vnl') ? [scriptArgs.join(' ')] : scriptArgs;

    const child = spawn('node', [fullPath, ...finalArgs], { stdio: 'inherit' });

    child.on('close', (code) => {
        if (code !== 0) {
            console.error(`\nüí• –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –∫–æ–¥–æ–º –ø–æ–º–∏–ª–∫–∏: ${code}`);
        }
        process.exit(code);
    });

    child.on('error', (err) => {
        console.error(`üí• –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–∫—Ä–∏–ø—Ç–∞ ${scriptPath}:`, err);
        process.exit(1);
    });
}

// Function to run an npm script
function runNpmScript(scriptName) {
    // 'shell: true' is important for cross-platform compatibility, especially on Windows
    const child = spawn('npm', ['run', scriptName], { stdio: 'inherit', shell: true });

    child.on('close', (code) => {
        if (code !== 0) {
            console.error(`\nüí• npm-—Å–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –∫–æ–¥–æ–º –ø–æ–º–∏–ª–∫–∏: ${code}`);
        }
        process.exit(code);
    });

    child.on('error', (err) => {
        console.error(`üí• –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É npm-—Å–∫—Ä–∏–ø—Ç–∞ ${scriptName}:`, err);
        process.exit(1);
    });
}


if (scriptConfig.path) {
    // It's a direct node script
    runNodeScript(scriptConfig.path, args);
} else if (scriptConfig.npm) {
    // It's an npm script
    runNpmScript(scriptConfig.npm);
}