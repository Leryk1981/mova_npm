import { readFileSync, existsSync } from 'fs';
import { resolve, dirname, join } from 'path';
import { fileURLToPath } from 'url';

// --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = resolve(__dirname, '../..');

// --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó ---
function loadVnlVocabulary() {
  const vocabPath = resolve(projectRoot, 'templates/messages/en.json');
  const vocab = JSON.parse(readFileSync(vocabPath, 'utf-8'));
  return {
    verbs: new Set(vocab.verbs),
    nouns: new Set(vocab.nouns),
    prepositions: new Set(Object.keys(vocab.prepositions)),
  };
}

function loadVnlMapping() {
  const mappingPath = resolve(projectRoot, 'templates/mappings/vnl_mapping.json');
  if (!existsSync(mappingPath)) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: ${mappingPath}`);
      throw new Error('Mapping file not found.');
  }
  return JSON.parse(readFileSync(mappingPath, 'utf-8'));
}

// --- –ü–∞—Ä—Å–µ—Ä ---
function parseVnl(sentence, vocabulary) {
  const { verbs, nouns, prepositions } = vocabulary;
  const tokens = sentence.trim().split(/\s+/);

  if (tokens.length < 2) {
    throw new Error('–†–µ—á–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ. –û—á—ñ–∫—É—î—Ç—å—Å—è —è–∫ –º—ñ–Ω—ñ–º—É–º –¥—ñ—î—Å–ª–æ–≤–æ —Ç–∞ —ñ–º–µ–Ω–Ω–∏–∫.');
  }

  const verb = tokens[0];
  if (!verbs.has(verb)) {
    throw new Error(`–ù–µ–≤—ñ–¥–æ–º–µ –¥—ñ—î—Å–ª–æ–≤–æ: "${verb}".`);
  }

  const noun = tokens[1];
  if (!nouns.has(noun)) {
    throw new Error(`–ù–µ–≤—ñ–¥–æ–º–∏–π —ñ–º–µ–Ω–Ω–∏–∫: "${noun}".`);
  }

  const ast = {
    verb,
    noun,
    params: {},
  };

  // –û–±—Ä–æ–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤, —â–æ –π–¥—É—Ç—å –ø—ñ—Å–ª—è –¥—ñ—î—Å–ª–æ–≤–∞ —Ç–∞ —ñ–º–µ–Ω–Ω–∏–∫–∞
  let currentPreposition = null;
  let currentValues = [];

  for (let i = 2; i < tokens.length; i++) {
    const token = tokens[i].replace(/^'|'$/g, '').replace(/^"|"$/g, ''); // –í–∏–¥–∞–ª—è—î–º–æ –ª–∞–ø–∫–∏
    if (prepositions.has(token)) {
      // –Ø–∫—â–æ –º–∏ –∑–Ω–∞–π—à–ª–∏ –Ω–æ–≤–∏–π –ø—Ä–∏–π–º–µ–Ω–Ω–∏–∫, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
      if (currentPreposition && currentValues.length > 0) {
        ast.params[currentPreposition] = currentValues.join(' ');
      }
      // –ü–æ—á–∏–Ω–∞—î–º–æ –∑–±–∏—Ä–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–π–º–µ–Ω–Ω–∏–∫–∞
      currentPreposition = token;
      currentValues = [];
    } else if (currentPreposition) {
      // –î–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –¥–æ –∑–Ω–∞—á–µ–Ω—å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–∏–π–º–µ–Ω–Ω–∏–∫–∞
      currentValues.push(token);
    } else {
      // –Ü–≥–Ω–æ—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω–∏, —â–æ –π–¥—É—Ç—å –ø–µ—Ä–µ–¥ –ø–µ—Ä—à–∏–º –ø—Ä–∏–π–º–µ–Ω–Ω–∏–∫–æ–º
      console.warn(`‚ö†Ô∏è  –Ü–≥–Ω–æ—Ä—É—î—Ç—å—Å—è —Ç–æ–∫–µ–Ω "${token}" –ø–µ—Ä–µ–¥ –ø–µ—Ä—à–∏–º –ø—Ä–∏–π–º–µ–Ω–Ω–∏–∫–æ–º.`);
    }
  }

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –∑—ñ–±—Ä–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
  if (currentPreposition && currentValues.length > 0) {
    ast.params[currentPreposition] = currentValues.join(' ');
  }

  return ast;
}

// --- –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä ---
function setNestedProperty(obj, path, value) {
    const keys = path.split('.');
    let current = obj;
    for (let i = 0; i < keys.length - 1; i++) {
        const key = keys[i];
        if (!current[key] || typeof current[key] !== 'object') {
            current[key] = {};
        }
        current = current[key];
    }
    current[keys[keys.length - 1]] = value;
}

function transformAstToAction(ast, mapping) {
  const vnlKey = `${ast.verb} ${ast.noun}`;
  const rule = mapping[vnlKey];

  if (!rule) {
    console.warn(`\n‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–ª—è "${vnlKey}". –°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –º–µ—Ç–∞-–¥—ñ—è 'vnl'.`);
    return {
      "—Ç–∏–ø": "–æ–±—Ä–æ–±–∫–∞_—Ä–µ—á–µ–Ω–Ω—è",
      "—Ä–µ—á–µ–Ω–Ω—è": `${ast.verb} ${ast.noun}...`,
      "–¥–µ—Ä–µ–≤–æ_—Ä–æ–∑–±–æ—Ä—É": ast
    };
  }

  const action = JSON.parse(JSON.stringify(rule.action));

  for (const paramName in ast.params) {
    const targetPath = rule.params_mapping[paramName];
    if (targetPath) {
      setNestedProperty(action, targetPath, ast.params[paramName]);
    } else {
      console.warn(`‚ö†Ô∏è  –î–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "${paramName}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —É –ø—Ä–∞–≤–∏–ª—ñ –¥–ª—è "${vnlKey}".`);
    }
  }
  return action;
}

function generatePlanFromAction(action, originalSentence) {
  const plan = {
    "–≤–µ—Ä—Å—ñ—è": "3.3",
    "–æ–ø–∏—Å": `–ü–ª–∞–Ω, –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –∑ —Ä–µ—á–µ–Ω–Ω—è: "${originalSentence}"`,
    "–¥—ñ—ó": [action]
  };
  return plan;
}


// --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É ---
const sentence = process.argv.slice(2).join(' ');

if (!sentence) {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ —Ä–µ—á–µ–Ω–Ω—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É.');
  console.log('\n–ü—Ä–∏–∫–ª–∞–¥:');
  console.log('npm run parse:vnl -- "send message to general with text \'Hello World\'"');
  process.exit(1);
}

try {
  console.log(`--- –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ—á–µ–Ω–Ω—è: "${sentence}" ---`);
  const vocabulary = loadVnlVocabulary();
  const mapping = loadVnlMapping();
  const ast = parseVnl(sentence, vocabulary);
  
  console.log('\n‚úÖ –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–µ –¥–µ—Ä–µ–≤–æ (AST):');
  console.log(JSON.stringify(ast, null, 2));

  const finalAction = transformAstToAction(ast, mapping);
  console.log('\n‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∞ –¥—ñ—è:');
  console.log(JSON.stringify(finalAction, null, 2));

  const plan = generatePlanFromAction(finalAction, sentence);
  console.log('\n‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –ø–ª–∞–Ω:');
  console.log(JSON.stringify(plan, null, 2));

} catch (error) {
  console.error(`üí• –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: ${error.message}`);
  process.exit(1);
}