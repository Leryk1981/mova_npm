import { readFileSync, writeFileSync, existsSync, mkdirSync, readdirSync } from 'fs';
import { resolve, dirname, basename, join } from 'path';
import { fileURLToPath } from 'url';

// --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = resolve(__dirname, '..');

// --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π ---
const inputDirRelativePath = 'canonical';
const inputDirFullPath = resolve(projectRoot, inputDirRelativePath);
if (!existsSync(inputDirFullPath)) {
  console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞: –í—Ö—ñ–¥–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: ${inputDirFullPath}`);
  process.exit(1);
}

// --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ —ñ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫–∞ ---
const lexiconPath = resolve(projectRoot, 'lexicon_uk.json');
const lexicon = JSON.parse(readFileSync(lexiconPath, 'utf-8'));
const allowlistPath = resolve(projectRoot, 'allowlist_structural.json');
const structural_uk = new Set(JSON.parse(readFileSync(allowlistPath, 'utf-8')));

const invertedValueLexicon = {};
const invertedStructuralLexicon = {};

for (const ukKey in lexicon) {
    const enKey = lexicon[ukKey];
    if (structural_uk.has(ukKey)) {
        invertedStructuralLexicon[enKey] = ukKey;
    } else {
        invertedValueLexicon[enKey] = ukKey;
    }
}

// –î–ª—è –∑–Ω–∞—á–µ–Ω—å –º–∏ –Ω–∞–¥–∞—î–º–æ –ø–µ—Ä–µ–≤–∞–≥—É –ø–µ—Ä–µ–∫–ª–∞–¥—É –¥–ª—è –∑–Ω–∞—á–µ–Ω—å (–Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∏—Ö), –∞–ª–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∏–π —è–∫ –∑–∞–ø–∞—Å–Ω–∏–π
const fullInvertedValueLexicon = { ...invertedStructuralLexicon, ...invertedValueLexicon };

// --- –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É ---
function translateObjectReverse(obj) {
  if (Array.isArray(obj)) {
    return obj.map(item => translateObjectReverse(item));
  }
  if (obj !== null && typeof obj === 'object') {
    const newObj = {};
    for (const key in obj) {
      const translatedKey = invertedStructuralLexicon[key] || key;
      let value = translateObjectReverse(obj[key]);

      // –Ø–∫—â–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∫–ª—é—á –±—É–≤ 'type', –ø–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ —ñ –π–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
      if (key === 'type' && typeof value === 'string') {
        value = fullInvertedValueLexicon[value] || value;
      }

      newObj[translatedKey] = value;
    }
    return newObj;
  }
  return obj;
}

// --- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É ---
const outputDir = resolve(projectRoot, 'templates/ua/from-en');
if (!existsSync(outputDir)) {
  mkdirSync(outputDir, { recursive: true });
  console.log(`üìÇ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: ${outputDir}`);
}

// --- –ß–∏—Ç–∞–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—ñ–≤ ---
const allFiles = readdirSync(inputDirFullPath);
const allJsonFiles = allFiles.filter(file => file.endsWith('.json'));
const jsonFiles = allJsonFiles.filter(file => file.startsWith('plan_') || file.startsWith('route_'));
const ignoredFiles = allJsonFiles.filter(file => !jsonFiles.includes(file) && file !== 'manifest.json');

if (ignoredFiles.length > 0) {
  console.log('\n‚ö†Ô∏è  –ù–∞—Å—Ç—É–ø–Ω—ñ .json —Ñ–∞–π–ª–∏ –±—É–ª–æ –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —ñ–º–µ–Ω—ñ:');
  ignoredFiles.forEach(f => console.log(`   - ${f}`));
  console.log('\n   –©–æ–± —Ñ–∞–π–ª–∏ –±—É–ª–∏ –æ–±—Ä–æ–±–ª–µ–Ω—ñ, —ó—Ö —ñ–º–µ–Ω–∞ –º–∞—é—Ç—å –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ "plan_" –∞–±–æ "route_".\n');
}

if (jsonFiles.length === 0) {
  console.warn(`ü§∑ –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —à–∞–±–ª–æ–Ω—É (plan_*.json, route_*.json) –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó '${inputDirRelativePath}'.`);
  process.exit(0);
}

console.log(`--- –ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–∫–ª–∞–¥—É —Ñ–∞–π–ª—ñ–≤ –∑ ${inputDirRelativePath} ---`);

jsonFiles.forEach(fileName => {
  const inputFileRelativePath = join(inputDirRelativePath, fileName);
  const inputFullPath = resolve(projectRoot, inputFileRelativePath);

  try {
    const enJsonContent = readFileSync(inputFullPath, 'utf-8');
    const enJson = JSON.parse(enJsonContent);
    const ukJson = translateObjectReverse(enJson);

    const baseFilename = basename(inputFileRelativePath);
    let outputFilename;
    if (baseFilename.startsWith('plan_')) {
        outputFilename = '–ø–ª–∞–Ω_—É–∫—Ä_' + baseFilename.substring('plan_'.length);
    } else if (baseFilename.startsWith('route_')) {
        outputFilename = '–º–∞—Ä—à—Ä—É—Ç_—É–∫—Ä_' + baseFilename.substring('route_'.length);
    } else {
        // –¶–µ–π –≤–∏–ø–∞–¥–æ–∫ –Ω–µ –º–∞—î —Ç—Ä–∞–ø–∏—Ç–∏—Å—å —á–µ—Ä–µ–∑ —Ñ—ñ–ª—å—Ç—Ä –≤–∏—â–µ, –∞–ª–µ –¥–ª—è –±–µ–∑–ø–µ–∫–∏:
        outputFilename = baseFilename;
    }

    const outputFullPath = join(outputDir, outputFilename);
    writeFileSync(outputFullPath, JSON.stringify(ukJson, null, 2), 'utf-8');
    console.log(`‚úÖ ${inputFileRelativePath} -> ${join('templates/ua/from-en', outputFilename)}`);
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É ${inputFileRelativePath}:`);
    console.error(error);
  }
});

console.log('--- –ü–µ—Ä–µ–∫–ª–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ---');