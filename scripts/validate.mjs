import { readFileSync, readdirSync } from 'fs';
import { resolve, dirname, join } from 'path';
import { fileURLToPath } from 'url';
// Import the specific constructor for JSON Schema 2020-12
import Ajv2020 from 'ajv/dist/2020.js';
import addFormats from 'ajv-formats';

// --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = resolve(__dirname, '..');

// Initialize Ajv using the 2020-12 constructor
const ajv = new Ajv2020({ allErrors: true });
// WORKAROUND: The Ajv instance is failing to find its own meta-schema.
// We disable schema validation to bypass this internal check, as we trust our own schemas.
// This allows Ajv to proceed with validating the data against the schemas.
ajv.opts.validateSchema = false;

addFormats(ajv);

let hasErrors = false;

// --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó ---
function validateFile(dataPath, schemaPath) {
  const dataFullPath = resolve(projectRoot, dataPath);
  const schemaFullPath = resolve(projectRoot, schemaPath);

  console.log(`\nüîé –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–∞–π–ª—É: ${dataPath}`);

  try {
    const schema = JSON.parse(readFileSync(schemaFullPath, 'utf-8'));
    const data = JSON.parse(readFileSync(dataFullPath, 'utf-8'));

    const validate = ajv.compile(schema);
    const valid = validate(data);

    if (valid) {
      console.log(`‚úÖ ${dataPath} –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å—Ö–µ–º—ñ ${schemaPath}.`);
    } else {
      console.error(`‚ùå ${dataPath} –ù–ï –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å—Ö–µ–º—ñ ${schemaPath}:`);
      console.error(JSON.stringify(validate.errors, null, 2));
      hasErrors = true;
    }
  } catch (error) {
    console.error(`üí• –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —á–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø–∞—Ä—Å–∏–Ω–≥—É —Ñ–∞–π–ª—ñ–≤ –¥–ª—è ${dataPath}:`);
    console.error(error);
    hasErrors = true;
  }
}

// --- –ó–∞–ø—É—Å–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–ª—è –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ ---
console.log('--- –ü–æ—á–∞—Ç–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–∞–Ω–æ–Ω—ñ—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ ---');

const canonicalDir = resolve(projectRoot, 'canonical');

try {
  const canonicalFiles = readdirSync(canonicalDir).filter(f => f.endsWith('.json'));

  if (canonicalFiles.length === 0) {
    console.warn('‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ .json —Ñ–∞–π–ª—É –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó canonical –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó.');
  }

  for (const fileName of canonicalFiles) {
    let schemaName;
    // –ü—Ä–æ—Å—Ç–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ö–µ–º–∏ –∑–∞ –Ω–∞–∑–≤–æ—é —Ñ–∞–π–ª—É
    if (fileName.startsWith('plan')) {
      schemaName = 'plan.schema.json';
    } else if (fileName.startsWith('route')) {
      schemaName = 'route.schema.json';
    }

    if (schemaName) {
      const dataPath = join('canonical', fileName);
      const schemaPath = join('schemas', schemaName);
      validateFile(dataPath, schemaPath);
    } else {
      console.warn(`‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó —Å—Ö–µ–º–∏ –¥–ª—è —Ñ–∞–π–ª—É: ${fileName}`);
    }
  }
} catch (error) {
  if (error.code === 'ENOENT') {
    console.warn(`‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è 'canonical' –Ω–µ —ñ—Å–Ω—É—î, –≤–∞–ª—ñ–¥–∞—Ü—ñ—é –ø—Ä–æ–ø—É—â–µ–Ω–æ.`);
  } else {
    console.error('üí• –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é canonical:', error);
    hasErrors = true;
  }
}

console.log('\n--- –í–∞–ª—ñ–¥–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ ---');

if (hasErrors) {
  console.error('\n‚ùóÔ∏è –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó.');
  process.exit(1);
} else {
  console.log('\nüéâ –£—Å—ñ –∫–∞–Ω–æ–Ω—ñ—á–Ω—ñ —Ñ–∞–π–ª–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–≤–∞–ª—ñ–¥–æ–≤–∞–Ω–æ!');
}