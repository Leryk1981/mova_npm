import { readFileSync, readdirSync, existsSync } from 'fs';
import { resolve, dirname, join } from 'path';
import { fileURLToPath } from 'url';
// Import the specific constructor for JSON Schema 2020-12
import Ajv2020 from 'ajv/dist/2020.js';
import addFormats from 'ajv-formats';

// --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = resolve(__dirname, '..');

// --- –†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –ø–æ—à—É–∫ —Ñ–∞–π–ª—ñ–≤ —Å—Ö–µ–º ---
function findJsonFiles(dir) {
  let results = [];
  if (!existsSync(dir)) return results;

  const list = readdirSync(dir, { withFileTypes: true });
  for (const file of list) {
    const fullPath = resolve(dir, file.name);
    if (file.isDirectory()) {
      results = results.concat(findJsonFiles(fullPath));
    } else if (file.name.endsWith('.json')) {
      results.push(fullPath);
    }
  }
  return results;
}

// --- –ü–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—è –≤—Å—ñ—Ö —Å—Ö–µ–º ---
const schemaDir = resolve(projectRoot, 'schemas');
const schemaFilePaths = findJsonFiles(schemaDir);
const allSchemas = [];

for (const schemaPath of schemaFilePaths) {
  const fileContent = readFileSync(schemaPath, 'utf-8');

  if (fileContent.trim() === '') {
    console.warn(`‚ö†Ô∏è  –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π, —ñ–≥–Ω–æ—Ä—É—î—Ç—å—Å—è: ${schemaPath}`);
    continue;
  }

  try {
    const schema = JSON.parse(fileContent);
    // –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–∞–π–ª, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω –æ–≥–æ–ª–æ—à—É—î —Å–µ–±–µ —è–∫ JSON Schema
    if (schema.$schema) {
      if (!schema.$id) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª —Å—Ö–µ–º–∏ "${schemaPath}" –Ω–µ –º–∞—î –æ–±–æ–≤'—è–∑–∫–æ–≤–æ–≥–æ –ø–æ–ª—è "$id".`);
        process.exit(1);
      }
      allSchemas.push(schema);
    }
  } catch (e) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON —É —Ñ–∞–π–ª—ñ: ${schemaPath}`);
    throw e; // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –ø–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
  }
}

// –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä Ajv. –í—ñ–Ω –º–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–µ—Ç–∞-—Å—Ö–µ–º—É 2020-12.
const ajv = new Ajv2020({ allErrors: true, validateSchema: false, discriminator: true });
// –ü–æ—Ç—ñ–º –¥–æ–¥–∞—î–º–æ –≤—Å—ñ –Ω–∞—à—ñ —Å—Ö–µ–º–∏. –¶–µ —Ç–∞–∫–æ–∂ —ó—Ö —Å–∫–æ–º–ø—ñ–ª—é—î.
ajv.addSchema(allSchemas);

addFormats(ajv);

let hasErrors = false;

// --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó ---
function validateFile(dataPath, schemaPath) {
  const dataFullPath = resolve(projectRoot, dataPath);
  const schemaFullPath = resolve(projectRoot, schemaPath);

  console.log(`\nüîé –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–∞–π–ª—É: ${dataPath}`);

  try {
    const schema = JSON.parse(readFileSync(schemaFullPath, 'utf-8'));
    const data = JSON.parse(readFileSync(dataFullPath, 'utf-8'));

    // –û—Ç—Ä–∏–º—É—î–º–æ –≤–∂–µ —Å–∫–æ–º–ø—ñ–ª—å–æ–≤–∞–Ω–∏–π –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä –∑–∞ –π–æ–≥–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º $id
    const validate = ajv.getSchema(schema.$id);
    if (!validate) {
      throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ —Å–∫–æ–º–ø—ñ–ª—å–æ–≤–∞–Ω—É —Å—Ö–µ–º—É –∑ $id: ${schema.$id}`);
    }
    const valid = validate(data);

    if (valid) {
      console.log(`‚úÖ ${dataPath} –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å—Ö–µ–º—ñ ${schemaPath}.`);
    } else {
      console.error(`‚ùå ${dataPath} –ù–ï –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å—Ö–µ–º—ñ ${schemaPath}:`);
      console.error(JSON.stringify(validate.errors, null, 2));
      hasErrors = true;
    }
  } catch (error) {
    console.error(`üí• –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —á–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø–∞—Ä—Å–∏–Ω–≥—É —Ñ–∞–π–ª—ñ–≤ –¥–ª—è ${dataPath}:`);
    console.error(error);
    hasErrors = true;
  }
}

// --- –ó–∞–ø—É—Å–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–ª—è –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ ---
console.log('--- –ü–æ—á–∞—Ç–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–∞–Ω–æ–Ω—ñ—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ ---');

const canonicalDir = resolve(projectRoot, 'canonical');

try {
  const canonicalFiles = readdirSync(canonicalDir).filter(f => f.endsWith('.json'));

  if (canonicalFiles.length === 0) {
    console.warn('‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ .json —Ñ–∞–π–ª—É –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó canonical –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó.');
  }

  for (const fileName of canonicalFiles) {
    if (fileName === 'manifest.json') continue; // Ignore the manifest file

    let schemaName;
    // –ü—Ä–æ—Å—Ç–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ö–µ–º–∏ –∑–∞ –Ω–∞–∑–≤–æ—é —Ñ–∞–π–ª—É
    if (fileName.includes('route')) {
      schemaName = 'route.1.0.schema.json';
    } else if (fileName.includes('plan')) {
      schemaName = 'envelope.3.3.schema.json';
    }

    if (schemaName) {
      const dataPath = join('canonical', fileName);
      const schemaPath = join('schemas', schemaName);
      validateFile(dataPath, schemaPath);
    } else {
      console.warn(`‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó —Å—Ö–µ–º–∏ –¥–ª—è —Ñ–∞–π–ª—É: ${fileName}`);
    }
  }
} catch (error) {
  if (error.code === 'ENOENT') {
    console.warn(`‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è 'canonical' –Ω–µ —ñ—Å–Ω—É—î, –≤–∞–ª—ñ–¥–∞—Ü—ñ—é –ø—Ä–æ–ø—É—â–µ–Ω–æ.`);
  } else {
    console.error('üí• –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é canonical:', error);
    hasErrors = true;
  }
}

console.log('\n--- –í–∞–ª—ñ–¥–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ ---');

if (hasErrors) {
  console.error('\n‚ùóÔ∏è –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó.');
  process.exit(1);
} else {
  console.log('\nüéâ –£—Å—ñ –∫–∞–Ω–æ–Ω—ñ—á–Ω—ñ —Ñ–∞–π–ª–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–≤–∞–ª—ñ–¥–æ–≤–∞–Ω–æ!');
}