import { readFileSync, writeFileSync, existsSync, mkdirSync, readdirSync, statSync } from 'fs';
import { resolve, dirname, basename, join, relative } from 'path';
import { fileURLToPath } from 'url';

// –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –ø—Ä–æ—î–∫—Ç—É
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = resolve(__dirname, '../..');

const inputPathArg = process.argv[2];
const langArg = process.argv[3];
const outputPathArg = process.argv[4];

if (!inputPathArg) {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∞–±–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∑ –º–æ–≤–Ω–∏–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏.');
  process.exit(1);
}

if (!langArg || !langArg.startsWith('--lang=')) {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: –í–∫–∞–∂—ñ—Ç—å –º–æ–≤—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é --lang=uk –∞–±–æ --lang=de');
  process.exit(1);
}

const lang = langArg.split('=')[1];
if (!['uk', 'de', 'fr', 'pl'].includes(lang)) {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–æ–≤–∏: uk, de, fr, pl');
  process.exit(1);
}

const inputFullPath = resolve(projectRoot, inputPathArg);
if (!existsSync(inputFullPath)) {
  console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞: –í—Ö—ñ–¥–Ω–∏–π —à–ª—è—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${inputFullPath}`);
  process.exit(1);
}

const inputStat = statSync(inputFullPath);

const explicitOutputPath = outputPathArg ? resolve(projectRoot, outputPathArg) : null;
if (explicitOutputPath && inputStat.isDirectory()) {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: –ö–æ–ª–∏ –≤–∫–∞–∑–∞–Ω–æ –≤–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª, –≤—Ö—ñ–¥ –º–∞—î –±—É—Ç–∏ –æ–¥–Ω–∏–º JSON-—Ñ–∞–π–ª–æ–º.');
  process.exit(1);
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ª–µ–∫—Å–∏–∫–æ–Ω —ñ allowlist –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏
const lexiconPath = resolve(projectRoot, `lexicon_${lang}.json`);
const allowlistPath = resolve(projectRoot, `allowlist_structural${lang === 'uk' ? '' : '_' + lang}.json`);

if (!existsSync(lexiconPath)) {
  console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞: –õ–µ–∫—Å–∏–∫–æ–Ω –¥–ª—è –º–æ–≤–∏ ${lang} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${lexiconPath}`);
  process.exit(1);
}

if (!existsSync(allowlistPath)) {
  console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞: Allowlist –¥–ª—è –º–æ–≤–∏ ${lang} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${allowlistPath}`);
  process.exit(1);
}

const lexicon = JSON.parse(readFileSync(lexiconPath, 'utf-8'));
const allowlist = new Set(JSON.parse(readFileSync(allowlistPath, 'utf-8')));

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –≤—Å—ñ—Ö .json —Ñ–∞–π–ª—ñ–≤
function findJsonFiles(startPath) {
  let results = [];
  const files = readdirSync(startPath);
  for (const file of files) {
    const filename = join(startPath, file);
    const stat = statSync(filename);
    if (stat.isDirectory()) {
      results = results.concat(findJsonFiles(filename));
    } else if (filename.endsWith('.json')) {
      results.push(filename);
    }
  }
  return results;
}

function translateObject(obj) {
  if (Array.isArray(obj)) {
    return obj.map(item => translateObject(item));
  }
  if (obj !== null && typeof obj === 'object') {
    const newObj = {};
    for (const key in obj) {
      const translatedKey = allowlist.has(key) ? (lexicon[key] || key) : key;
      let value = translateObject(obj[key]);

      // –î–ª—è type —Ç–∞–∫–æ–∂ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ª–µ–∫—Å–∏–∫–æ–Ω, —è–∫—â–æ —Ü–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ allowlist
      if (translatedKey === 'type' && typeof value === 'string' && allowlist.has(value)) {
        value = lexicon[value] || value;
      }

      newObj[translatedKey] = value;
    }
    return newObj;
  }
  return obj;
}

const filesToProcess = [];
if (inputStat.isDirectory()) {
  filesToProcess.push(...findJsonFiles(inputFullPath));
} else if (inputFullPath.endsWith('.json')) {
  filesToProcess.push(inputFullPath);
} else {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: –í—Ö—ñ–¥ –º–∞—î –±—É—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—î—é –∞–±–æ .json —Ñ–∞–π–ª–æ–º.');
  process.exit(1);
}

if (filesToProcess.length === 0) {
  console.warn(`‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ .json —Ñ–∞–π–ª—É —É ${inputPathArg}`);
  process.exit(0);
}

let outputDir;
if (!explicitOutputPath) {
  outputDir = resolve(projectRoot, 'templates/canonical');
  if (!existsSync(outputDir)) {
    mkdirSync(outputDir, { recursive: true });
    console.log(`üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: ${outputDir}`);
  }
} else {
  const parentDir = dirname(explicitOutputPath);
  if (!existsSync(parentDir)) {
    mkdirSync(parentDir, { recursive: true });
  }
}

console.log(`--- –ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó –∑ ${inputPathArg} (${lang}) ---`);

filesToProcess.forEach(inputPath => {
  const inputRelativePath = relative(projectRoot, inputPath);

  try {
    const ukJsonContent = readFileSync(inputPath, 'utf-8');
    if (ukJsonContent.trim() === '') {
      console.warn(`‚ö†Ô∏è  –§–∞–π–ª ${inputRelativePath} –ø–æ—Ä–æ–∂–Ω—ñ–π —ñ –±—É–¥–µ –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–π.`);
      return;
    }
    const langJson = JSON.parse(ukJsonContent);
    const enJson = translateObject(langJson);

    let outputFullPath;
    if (explicitOutputPath) {
      outputFullPath = explicitOutputPath;
    } else {
      const outputFilename = basename(inputPath)
        .replace(`_–ø–ª–∞–Ω_${lang}`, '_plan')
        .replace(`_–º–∞—Ä—à—Ä—É—Ç_${lang}`, '_route')
        .replace(`_${lang}`, '')
        .replace('.json', '.canonical.json');
      outputFullPath = join(outputDir, outputFilename);
    }

    writeFileSync(outputFullPath, JSON.stringify(enJson, null, 2), 'utf-8');
    const outputRelative = relative(projectRoot, outputFullPath);
    console.log(`‚úÖ ${inputRelativePath} -> ${outputRelative}`);
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É ${inputRelativePath}:`);
    console.error(error);
  }
});

console.log('--- –¢—Ä–∞–Ω—Å–ª—è—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ ---');